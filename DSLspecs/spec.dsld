// this is a DSLD file
// start off creating a custom DSL Descriptor for your Groovy DSL

// The following snippet adds the 'newProp' to all types that are a subtype of GroovyObjects
// contribute(currentType(subType('groovy.lang.GroovyObject'))) {
//   property name : 'newProp', type : String, provider : 'Sample DSL', doc : 'This is a sample.  You should see this in content assist for GroovyObjects: <pre>newProp</pre>'
// }

//currentType( subType( types.Text ) ).accept {
//	[ m: "meter",  yd: "yard",  cm: "centimerter",  mi: "mile",  km: "kilometer"].each {
//	  property name:it.key, type:"Distance",
//		doc: """A <code>${it.value}</code> from <a href="$url">$url</a>"""
//    }
//}


(enclosingCallName("Test")).accept {
	method	 	name: 'entity',	type: 'MetaModell.BusinessObjects.Entity',	doc: 'Beschreibt ein Entity', params: [null:'java.lang.String']
				
	property 	name: 'valueObject', type: 'MetaModell.BusinessObjects.ValueObject', doc: 'Beschreibt ein Value Object'
}

enclosingCallName("entity").accept {
	property	name: 'attr', type: 'MetaModell.DomainProperty', doc: 'Ein Attribut'
	property	name: 'hasMany', type: 'MetaModell.DomainObjectReference', doc: 'Eine Referenz zu einem anderen Objekt'
	property	name: 'has', type: 'MetaModell.DomainObjectReference', doc: 'Eine Referenz zu einem anderen Objekt
	
	property	name: 'description', type: 'MetaModell.Requirement', doc: 'Beschreibung des Entity'
	
}

//(enclosingCallName('entity')).accept {
//	log currentNode
//}

//(enclosingCallName("entity") & bind(var : currentIdentifier())).accept {
//		for(def i : var){
//			log i
//		}
//		property	name: 'attr',
//					type: 'MetaModell.DomainProperty',
//					doc: 'Ein Attribut'
//}