package ${rootPackage};

import java.util.*;
import spine.strategies.Exposer;
import cuba.annotation.*;
import de.mathema.pride.*;
import de.bertelsmann.coins.general.error.Assert;
import de.bertelsmann.general.*;
import de.bertelsmann.general.Entity4.PopulateMode;
import de.bertelsmann.coins.container.general.Log4JTracingInterceptor;
import de.bertelsmann.coins.general.error.Assert;
import de.bertelsmann.container.general.persistence.*;

/** 
 * Diese Klasse enthält in die generiertem CRUD-Methoden zu den Entities / Aggregates <UL>
 *  	<li>${repository.firstEntity.name}Entity
 * </UL>
 * Diese abstrakte Klasse wird durch Klasse <i>${repository.name}RepositoryImpl</i> implementiert und wird letzendlich als Interface
 * <i>common.${repository.name}RepositoryImpl</i> zur Verfügung gestellt. 
 * Manuell Erweiterungen können dort (d.h in I + Impl) umgesetzt werden.
 * Die abstrake und diese Klasse sind nach dem <a href = "http://www.research.ibm.com/designpatterns/pubs/gg.html">
 * Generation Gap Pattern </a> gebaut.<P>
 * <b>Diese Klasse ist generiert</b> mittels Template RepositoryImpl::RepoImplDefinition.<BR/>
 * Diese Klasse ist ein 100-% Generat. Manuelle Anpassungen bleiben beim nächsten Generatorlauf nicht erhalten.
 */
@Interceptors(value = { Log4JTracingInterceptor.class })
@Stateless(name = "${repository.name.toLowerCase()}")
public class ${repository.name}Impl extends DMDAbstractRepository implements ${repository.name}I, Exposer {

	/** {@inheritDoc} */
	public ${repository.firstEntity.name}Entity create${repository.firstEntity.name}(${repository.firstEntity.name}Entity p${repository.firstEntity.name}) {
		try {
			return (${repository.firstEntity.name}Entity) create(new${repository.firstEntity.name}DBA(p${repository.firstEntity.name}),
					${repository.firstEntity.name}DBA.ID_GENERATOR_SEQUENCE);
		}

		catch (Exception e) {
			throw handleUnexpectedException(e);
		}

	}

	/** {@inheritDoc} */
	public ${repository.firstEntity.name}Entity save${repository.firstEntity.name}NullSafe(${repository.firstEntity.name}Entity p${repository.firstEntity.name})
			throws LockException {
		if (p${repository.firstEntity.name} == null) {
			return null;
		}
		if (!isInDB(p${repository.firstEntity.name})) {
			return create${repository.firstEntity.name}(p${repository.firstEntity.name});
		}
		return update${repository.firstEntity.name}(p${repository.firstEntity.name});
	}

	/** {@inheritDoc} */
	public ${repository.firstEntity.name}Entity update${repository.firstEntity.name}(${repository.firstEntity.name}Entity p${repository.firstEntity.name}) throws LockException {
		try {
			return (${repository.firstEntity.name}Entity) update(new ${repository.firstEntity.name}DBA(p${repository.firstEntity.name}));
		}

		catch (Exception e) {
			throw handleUnexpectedButLockedException(e);
		}

	}

	/** {@inheritDoc} */
	@TransactionAttribute(TransactionAttributeType.SUPPORTS)
	public ${repository.firstEntity.name}Entity find${repository.firstEntity.name}ById(Long id) {
		if (id == null) {
			//id könnte null sein, wenn enrich() optionale Assoziationen auflöst
			return null;
		}
		// userContext wird hier nicht weiter ausgewertet, man braucht ihn halt für Konstruktor
		return find${repository.firstEntity.name}ById(new ${repository.firstEntity.name}Entity(userContext, id));
	}

	/** {@inheritDoc} */
	public ${repository.firstEntity.name}Entity find${repository.firstEntity.name}ById(${repository.firstEntity.name}Entity entity) {
		try {
			return (${repository.firstEntity.name}Entity) find(new ${repository.firstEntity.name}DBA(entity));
		}

		catch (Exception e) {
			throw handleUnexpectedException(e);
		}

	}

	/** {@inheritDoc} */
	@TransactionAttribute(TransactionAttributeType.SUPPORTS)
	public ${repository.firstEntity.name}Entity[] queryAll${repository.firstEntity.name}s() {
		try {
			// userContext wird hier nicht weiter ausgewertet, man braucht ihn halt für Construktor
			${repository.firstEntity.name}DBA dba = new${repository.firstEntity.name}DBA(new ${repository.firstEntity.name}Entity(userContext));
			return (${repository.firstEntity.name}Entity[]) toArray(dba.queryAll(), dba);
		} catch (NoResultsException e) {
			return new ${repository.firstEntity.name}Entity[] {};
		} catch (Exception e) {
			throw handleUnexpectedException(e);
		}
	}

	
	/** {@inheritDoc} */
	/*
	@TransactionAttribute(TransactionAttributeType.SUPPORTS)
	public ${repository.firstEntity.name}Entity[] query${repository.firstEntity.name}s(${repository.firstEntity.name}Query query) {
		try {
			${repository.firstEntity.name}DBA dba = new${repository.firstEntity.name}DBA(new ${repository.firstEntity.name}Entity(query.getUserContext()));
			ResultIterator ri = query(dba, query);
			${repository.firstEntity.name}Entity[] result = (${repository.firstEntity.name}Entity[]) toBoundedArray(ri, dba,
					query.getMaxAnzahlTreffer());
			if (result == null)
				result = new ${repository.firstEntity.name}Entity[0];
			return result;
		} catch (BasicServiceException e) {
			if (e.getCause() instanceof NoResultsException) {
				return new ${repository.firstEntity.name}Entity[] {};
			}
			handleUnexpectedException(e);
		} catch (Exception e) {
			throw handleUnexpectedException(e);
		}
		return null;
	}*/

	/** 
	 * Standard DBA-Factory-Methode für den DBA zu ${repository.firstEntity.name}firstEntity.
	 * Sinn dieser Factory-Methode ist es, die Erweiterbarkeit durch Vererben zu ermöglichen.
	 */
	protected ${repository.firstEntity.name}DBA new${repository.firstEntity.name}DBA(${repository.firstEntity.name}Entity p${repository.firstEntity.name}) {
		return new ${repository.firstEntity.name}DBA(p${repository.firstEntity.name});
	}

	/** Implementierung von Exposer.expose. Stellt das Interne Interface bereit  */
	@SuppressWarnings("unchecked")
	public <T> T expose(Class<T> interfaceType) {
		return interfaceType == ${repository.name}I.class ? (T) getContext().getInternalRef() : null;
	}

}
